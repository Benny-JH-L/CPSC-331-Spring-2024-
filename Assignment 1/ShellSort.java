
// CPSC 331 -Spring 2024- Assignment 1 | Complexity of Algorithms
// Name: Benny Liang | UCID: 30192142

public class ShellSort 
{
    // Iterative Shell sort using novel gap sequence
    public static void shellSortIterative(int[] array)
    {
        if (array == null)
            throw new NullPointerException("Can't sort null array.");

        int n = array.length;
        int gap = 1;

        while (gap < n)
            gap = gap * 3;

        shellSortIterativeHelper(array, n, gap/3);
    }

    private static void shellSortIterativeHelper(int[] array, int n, int gap)
    {
        while (gap > 0)
        {
            for (int i = gap; i < n; i++)
            {
                int temp = array[i];
                int j = i;
                while (j >= gap && array[j - gap] > temp)
                {
                    array[j] = array[j - gap];
                    j = j - gap;
                }
                array[j] = temp;
            }
            gap = gap/3;
        }
    }

    // Recursive Shell Sort using novel gap sequence
    public static void shellSortRecursive(int[] array)
    {
        if (array == null)
            throw new NullPointerException("Can't sort null array.");

        int n = array.length;
        int gap = 1;

        while (gap < n)
            gap = gap * 3;

        shellSortRecursiveHelper(array, n, gap/3);
    }

    private static void shellSortRecursiveHelper(int[] array, int n, int gap)
    {
        if (gap > 0)
        {
            for (int i = gap; i < n; i++)
            {
                int temp = array[i];
                int j = i;
                while (j >= gap && array[j - gap] > temp)
                {
                    array[j] = array[j - gap];
                    j = j - gap;
                }
                array[j] = temp;
            }
            shellSortRecursiveHelper(array, n, gap/3);
        }
    }


    public static void main(String[] args)
    {
        long startTimeI, endTimeI, startTimeR, endTimeR;
        long durationIterative, durationRecur;

        // Input array to the iterative shell sort (Note-To-Self: Get test arrays from 'test file' on D2L)
        int[] arrayIterative = {986, 393, 447, 314, 404, 416, 632, 916, 629, 188, 602, 414, 268, 275, 99, 768, 634, 186, 901, 372, 546, 86,
            542, 317, 6, 404, 859, 801, 380, 515, 567, 365, 543, 876, 841, 116, 138, 211, 548, 554, 471, 901, 745, 915, 302, 173, 871,
            363, 49, 509, 546, 362, 292, 165, 352, 822, 42, 483, 472, 45, 258, 624, 222, 181, 224, 771, 185, 386, 920, 588, 6, 860, 262,
            383, 981, 457, 257, 418, 65, 238, 62, 525, 494, 14, 304, 573, 154, 388, 261, 781, 741, 499, 947, 435, 309, 568, 161, 634,
            498, 736, 571, 896, 449, 651, 894, 782, 620, 285, 369, 231, 86, 669, 924, 927, 989, 380, 722, 834, 632, 315, 602, 975, 23,
            105, 788, 255, 705, 24, 822, 69, 296, 51, 246, 435, 746, 262, 602, 654, 809, 658, 715, 976, 802, 596, 856, 384, 323, 752,
            175, 680, 620, 535, 214, 867, 608, 658, 304, 969, 862, 226, 835, 736, 31, 766, 358, 672, 92, 776, 535, 147, 552, 677, 802,
            720, 752, 366, 886, 259, 36, 159, 898, 842, 517, 604, 429, 358, 534, 547, 499, 988, 959, 330, 355, 79, 284, 566, 773, 708,
            564, 981, 169, 386, 61, 784, 195, 100, 181, 121, 682, 868, 852, 301, 119, 357, 261, 5, 707, 453, 283, 559, 210, 181, 792,
            292, 115, 263, 417, 614, 65, 179, 749, 192, 68, 326, 28, 50, 104, 295, 236, 679, 32, 319, 271, 949, 331, 981, 129, 16, 92, 
            835, 253, 715, 39, 952, 630, 380, 311, 899, 987, 387, 741, 225, 916, 439, 900, 35, 625, 477, 959, 903, 938, 13, 891, 224,
            897, 603, 881, 765, 732, 543, 651, 428, 518, 298, 128, 113, 101, 110, 931, 559, 726, 448, 230, 953, 372, 996, 516, 869,
            200, 501, 235, 621, 258, 520, 208, 236, 70, 19, 453, 42, 898, 344, 710, 876, 788, 728, 449, 147, 976, 22, 867, 727, 350,
            641, 439, 687, 954, 156, 217, 480, 701, 350, 25, 544, 785, 690, 667, 285, 530, 882, 571, 679, 464, 621, 894, 63, 233, 818,
            396, 915, 707, 231, 522, 367, 463, 355, 716, 641, 705, 348, 967, 480, 204, 53, 812, 202, 275, 64, 968, 281, 794, 404, 528,
            98, 410, 243, 978, 442, 747, 331, 855, 508, 916, 415, 741, 747, 342, 849, 849, 961, 390, 22, 145, 530, 465, 254, 576, 456,
            251, 750, 618, 227, 616, 716, 95, 980, 795, 990, 997, 215, 965, 928, 965, 491, 852, 384, 48, 176, 237, 935, 411, 203, 549,
            247, 957, 672, 225, 491, 569, 13, 901, 704, 319, 911, 297, 246, 12, 620, 96, 122, 50, 516, 234, 948, 843, 588, 186, 983,
            503, 640, 193, 34, 29, 477, 921, 883, 909, 856, 590, 955, 420, 734, 854, 745, 97, 833, 890, 71, 556, 68, 580, 979, 678, 844,
            352, 395, 580, 811, 927, 521, 405, 473, 455, 806, 115, 657, 638, 293, 414, 757, 525, 31, 91, 751, 362, 39, 500, 718, 949,
            770, 530, 937, 900, 661, 381, 203, 314, 354, 732, 35, 922, 40, 191, 694, 553, 805, 873, 387, 913, 51, 868, 323, 546, 517,
            285, 540, 364, 325, 78, 192, 79, 795, 746, 230, 555, 515, 659, 389, 819, 604, 919, 368, 292, 961, 953, 139, 580, 254, 412,
            97, 198, 528, 218, 327, 802, 976, 43, 696, 200, 654, 617, 941, 21, 103, 816, 473, 94, 875, 491, 438, 329, 669, 361, 504,
            636, 616, 559, 788, 493, 698, 375, 741, 8, 719, 294, 43, 191, 109, 99, 423, 315, 64, 787, 80, 697, 833, 841, 699, 16, 655,
            338, 763, 55, 770, 135, 677, 228, 208, 509, 710, 654, 215, 86, 915, 644, 422, 210, 181, 630, 160, 72, 23, 553, 693, 125,
            597, 233, 718, 464, 731, 470, 629, 988, 263, 841, 799, 12, 964, 624, 559, 518, 36, 893, 81, 918, 808, 389, 231, 835, 935,
            892, 259, 758, 738, 389, 546, 566, 424, 95, 537, 361, 971, 412, 431, 165, 957, 995, 15, 413, 960, 685, 384, 303, 241, 724,
            810, 466, 56, 552, 895, 980, 815, 699, 532, 274, 253, 572, 403, 697, 517, 857, 487, 449, 8, 685, 946, 745, 3, 177, 894, 253,
            726, 527, 894, 92, 291, 217, 25, 598, 791, 744, 435, 707, 256, 49, 543, 990, 955, 289, 372, 977, 921, 377, 59, 986, 445,
            493, 202, 27, 397, 535, 161, 552, 2, 657, 751, 689, 917, 783, 791, 310, 648, 890, 781, 58, 639, 728, 670, 217, 793, 985,
            537, 939, 599, 549, 537, 642, 663, 217, 812, 504, 725, 841, 675, 274, 983, 95, 981, 801, 803, 17, 682, 807, 616, 121, 722,
            742, 334, 230, 960, 836, 195, 463, 654, 27, 26, 280, 190, 693, 330, 437, 977, 556, 832, 43, 688, 591, 426, 158, 382, 681,
            570, 837, 958, 388, 139, 866, 661, 819, 339, 229, 598, 229, 44, 696, 127, 677, 72, 277, 189, 109, 489, 948, 768, 531, 883,
            241, 717, 788, 959, 42, 812, 789, 772, 702, 925, 617, 468, 64, 852, 405, 216, 683, 38, 447, 313, 103, 607, 964, 988, 314,
            226, 800, 345, 523, 292, 344, 873, 247, 541, 460, 721, 366, 860, 897, 815, 263, 374, 131, 808, 928, 570, 255, 755, 898,
            468, 246, 934, 353, 4, 493, 875, 218, 394, 961, 918, 237, 673, 985, 950, 217, 597, 372, 917, 927, 346, 977, 710, 102, 714,
            245, 818, 885, 579, 310, 639, 592, 851, 38, 606, 578, 464, 628, 367, 417, 632, 877, 155, 318, 410, 720, 238, 515, 16, 886,
            991, 832, 10, 48, 157, 998, 15, 443, 319, 196, 890, 654, 184, 200, 503, 628, 86, 997, 993, 893, 94, 618, 329, 367, 565, 676,
            525, 210, 653, 946, 354, 888, 602, 125, 576, 771, 824, 771, 97, 313, 427, 737, 940, 363, 147, 5, 589, 811, 186, 774, 353,
            955, 650, 211, 80, 611, 896, 592, 268, 138, 631, 920, 504, 278, 155, 388, 943, 222, 595, 177, 107, 124, 410, 583, 638};
            
        int[] arrayRecursive = {986, 393, 447, 314, 404, 416, 632, 916, 629, 188, 602, 414, 268, 275, 99, 768, 634, 186, 901, 372, 546, 86,
            542, 317, 6, 404, 859, 801, 380, 515, 567, 365, 543, 876, 841, 116, 138, 211, 548, 554, 471, 901, 745, 915, 302, 173, 871,
            363, 49, 509, 546, 362, 292, 165, 352, 822, 42, 483, 472, 45, 258, 624, 222, 181, 224, 771, 185, 386, 920, 588, 6, 860, 262,
            383, 981, 457, 257, 418, 65, 238, 62, 525, 494, 14, 304, 573, 154, 388, 261, 781, 741, 499, 947, 435, 309, 568, 161, 634,
            498, 736, 571, 896, 449, 651, 894, 782, 620, 285, 369, 231, 86, 669, 924, 927, 989, 380, 722, 834, 632, 315, 602, 975, 23,
            105, 788, 255, 705, 24, 822, 69, 296, 51, 246, 435, 746, 262, 602, 654, 809, 658, 715, 976, 802, 596, 856, 384, 323, 752,
            175, 680, 620, 535, 214, 867, 608, 658, 304, 969, 862, 226, 835, 736, 31, 766, 358, 672, 92, 776, 535, 147, 552, 677, 802,
            720, 752, 366, 886, 259, 36, 159, 898, 842, 517, 604, 429, 358, 534, 547, 499, 988, 959, 330, 355, 79, 284, 566, 773, 708,
            564, 981, 169, 386, 61, 784, 195, 100, 181, 121, 682, 868, 852, 301, 119, 357, 261, 5, 707, 453, 283, 559, 210, 181, 792,
            292, 115, 263, 417, 614, 65, 179, 749, 192, 68, 326, 28, 50, 104, 295, 236, 679, 32, 319, 271, 949, 331, 981, 129, 16, 92, 
            835, 253, 715, 39, 952, 630, 380, 311, 899, 987, 387, 741, 225, 916, 439, 900, 35, 625, 477, 959, 903, 938, 13, 891, 224,
            897, 603, 881, 765, 732, 543, 651, 428, 518, 298, 128, 113, 101, 110, 931, 559, 726, 448, 230, 953, 372, 996, 516, 869,
            200, 501, 235, 621, 258, 520, 208, 236, 70, 19, 453, 42, 898, 344, 710, 876, 788, 728, 449, 147, 976, 22, 867, 727, 350,
            641, 439, 687, 954, 156, 217, 480, 701, 350, 25, 544, 785, 690, 667, 285, 530, 882, 571, 679, 464, 621, 894, 63, 233, 818,
            396, 915, 707, 231, 522, 367, 463, 355, 716, 641, 705, 348, 967, 480, 204, 53, 812, 202, 275, 64, 968, 281, 794, 404, 528,
            98, 410, 243, 978, 442, 747, 331, 855, 508, 916, 415, 741, 747, 342, 849, 849, 961, 390, 22, 145, 530, 465, 254, 576, 456,
            251, 750, 618, 227, 616, 716, 95, 980, 795, 990, 997, 215, 965, 928, 965, 491, 852, 384, 48, 176, 237, 935, 411, 203, 549,
            247, 957, 672, 225, 491, 569, 13, 901, 704, 319, 911, 297, 246, 12, 620, 96, 122, 50, 516, 234, 948, 843, 588, 186, 983,
            503, 640, 193, 34, 29, 477, 921, 883, 909, 856, 590, 955, 420, 734, 854, 745, 97, 833, 890, 71, 556, 68, 580, 979, 678, 844,
            352, 395, 580, 811, 927, 521, 405, 473, 455, 806, 115, 657, 638, 293, 414, 757, 525, 31, 91, 751, 362, 39, 500, 718, 949,
            770, 530, 937, 900, 661, 381, 203, 314, 354, 732, 35, 922, 40, 191, 694, 553, 805, 873, 387, 913, 51, 868, 323, 546, 517,
            285, 540, 364, 325, 78, 192, 79, 795, 746, 230, 555, 515, 659, 389, 819, 604, 919, 368, 292, 961, 953, 139, 580, 254, 412,
            97, 198, 528, 218, 327, 802, 976, 43, 696, 200, 654, 617, 941, 21, 103, 816, 473, 94, 875, 491, 438, 329, 669, 361, 504,
            636, 616, 559, 788, 493, 698, 375, 741, 8, 719, 294, 43, 191, 109, 99, 423, 315, 64, 787, 80, 697, 833, 841, 699, 16, 655,
            338, 763, 55, 770, 135, 677, 228, 208, 509, 710, 654, 215, 86, 915, 644, 422, 210, 181, 630, 160, 72, 23, 553, 693, 125,
            597, 233, 718, 464, 731, 470, 629, 988, 263, 841, 799, 12, 964, 624, 559, 518, 36, 893, 81, 918, 808, 389, 231, 835, 935,
            892, 259, 758, 738, 389, 546, 566, 424, 95, 537, 361, 971, 412, 431, 165, 957, 995, 15, 413, 960, 685, 384, 303, 241, 724,
            810, 466, 56, 552, 895, 980, 815, 699, 532, 274, 253, 572, 403, 697, 517, 857, 487, 449, 8, 685, 946, 745, 3, 177, 894, 253,
            726, 527, 894, 92, 291, 217, 25, 598, 791, 744, 435, 707, 256, 49, 543, 990, 955, 289, 372, 977, 921, 377, 59, 986, 445,
            493, 202, 27, 397, 535, 161, 552, 2, 657, 751, 689, 917, 783, 791, 310, 648, 890, 781, 58, 639, 728, 670, 217, 793, 985,
            537, 939, 599, 549, 537, 642, 663, 217, 812, 504, 725, 841, 675, 274, 983, 95, 981, 801, 803, 17, 682, 807, 616, 121, 722,
            742, 334, 230, 960, 836, 195, 463, 654, 27, 26, 280, 190, 693, 330, 437, 977, 556, 832, 43, 688, 591, 426, 158, 382, 681,
            570, 837, 958, 388, 139, 866, 661, 819, 339, 229, 598, 229, 44, 696, 127, 677, 72, 277, 189, 109, 489, 948, 768, 531, 883,
            241, 717, 788, 959, 42, 812, 789, 772, 702, 925, 617, 468, 64, 852, 405, 216, 683, 38, 447, 313, 103, 607, 964, 988, 314,
            226, 800, 345, 523, 292, 344, 873, 247, 541, 460, 721, 366, 860, 897, 815, 263, 374, 131, 808, 928, 570, 255, 755, 898,
            468, 246, 934, 353, 4, 493, 875, 218, 394, 961, 918, 237, 673, 985, 950, 217, 597, 372, 917, 927, 346, 977, 710, 102, 714,
            245, 818, 885, 579, 310, 639, 592, 851, 38, 606, 578, 464, 628, 367, 417, 632, 877, 155, 318, 410, 720, 238, 515, 16, 886,
            991, 832, 10, 48, 157, 998, 15, 443, 319, 196, 890, 654, 184, 200, 503, 628, 86, 997, 993, 893, 94, 618, 329, 367, 565, 676,
            525, 210, 653, 946, 354, 888, 602, 125, 576, 771, 824, 771, 97, 313, 427, 737, 940, 363, 147, 5, 589, 811, 186, 774, 353,
            955, 650, 211, 80, 611, 896, 592, 268, 138, 631, 920, 504, 278, 155, 388, 943, 222, 595, 177, 107, 124, 410, 583, 638};
            
        // Iterative Shell Sort
        startTimeI = System.nanoTime();
        shellSortIterative(arrayIterative);
        endTimeI = System.nanoTime();

        System.out.println("Array sorted using the iterative function:");
        // printArray(arrayIterative);

        durationIterative = endTimeI - startTimeI;
        printTimeTaken(durationIterative, "Iterative");

        // Recursive Shell Sort
        startTimeR = System.nanoTime();
        shellSortRecursive(arrayRecursive);
        endTimeR = System.nanoTime();

        System.out.println("Array sorted using the recursive function:");
        // printArray(arrayRecursive);

        durationRecur = endTimeR - startTimeR;
        printTimeTaken(durationRecur, "Recursive");
    }

    // Utility method to print an array
    public static void printArray (int [] array) 
    {
        for (int num : array)
            System.out.println(num + " ");
        System.out.println();
    }

    /**
     * Prints the time taken for the version of sorting algorithm.
     * @param durationOfSort a long, nanoseconds taken for the sorting algorithm.
     * @param version a String, the version (Iterative or Recursive).
     */
    public static void printTimeTaken(long durationOfSort, String version)
    {
        double seconds, milliseconds;
        seconds = durationOfSort / 1_000_000_000;
        milliseconds = durationOfSort / 1_000_000;
        System.out.println(version + " sort time: " + seconds + " seconds, or " + milliseconds + " milliseconds, or " + durationOfSort + " nanoseconds.\n");
    }
    
}
